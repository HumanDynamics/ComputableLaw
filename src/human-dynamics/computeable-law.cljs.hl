(page "index.html"
  (:refer-clojure
    :exclude [- name])
  (:refer-hoplon
    :exclude [elem rt title input form b s section])
  (:require
    [clojure.string         :refer [capitalize]]
    [hoplon.ui              :refer [elem image video *data*]]
    [hoplon.ui.attrs        :refer [- c r s b d]]
    [hoplon.material        :refer [field action-button]]
    [hoplon.material.colors :as c :refer [white teal grey grey-300 black]])
  (:require-macros
    [hoplon.ui :refer [button form window]]))

;;; constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def organization "Legal Technology Laboratory")

(def content-url  "http://data.computablelaw.org/content.edn")
(def resource-url "http://data.computablelaw.org/resources/")
(def icon-url     "https://fonts.googleapis.com/icon?family=Material+Icons")
(def font-url     "https://fonts.googleapis.com/css?family=RobotoDraft:400,500,700,400italic")

;;; utils ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn ->time [str]
  (.toLocaleTimeString (js/Date. str) (.-language js/navigator) #js{:hour "2-digit" :minute "2-digit"}))

;;; state ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defc db {})
(defc menu-open false)

;;; service ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(.get js/jQuery content-url #(swap! db assoc :views (cljs.reader/read-string %)))

;;; query ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defc= route    (-> db :route))
(defc= views    (-> db :views))
(defc= state    (-> route ffirst))
(defc= qargs    (-> route second))
(defc= name     (-> views (get state) :name))
(defc= title    (-> views (get state) :title))
(defc= events   (-> views :events :items))
(defc= event    (get events (:id qargs)))
(defc= photos   (-> views :photos :items))
(defc= photo    (get photos (:id qargs)))
(defc= projects (-> views :projects :items))
(defc= project  (get projects (:id qargs)))
(defc= videos   (-> views :videos :items))

;;; command ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn change-route [db route]
  (assoc db :route route))

(defn change-state [db path & [query]]
  (change-route db [path query]))

(defn initiate [db route status _]
  (change-route db (if (empty? route) [[:projects]] route)))

;;; view ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; styles ;;;

; breakpoints
(def sm 760)
(def md 1240)
(def lg 1480)

; sizes
(def pad-sm 8)
(def pad-md 16)
(def pad-lg 24)

;; colors

(def font-black (c 0x333333))

; fonts
(def helvetica ["Helvetica Neue" "Lucida Grande" :sans-serif])

; text
(defelem view-title [attrs elems]
  (elem :w (r 1 1) :f 38 :ff helvetica :fx :uppercase :ft :500
    attrs elems))

(defelem view-subtitle [attrs elems]
  (elem :w (r 1 1) :pt 10 :fi :italic attrs elems))

(defelem view-body [attrs elems]
  (elem :w (r 1 1) attrs elems))

(defelem section-title [attrs elems]
  (elem :w (r 1 1) :f 23
    attrs elems))

(defelem section-subtitle [attrs elems]
  (elem :w (r 1 1) :pb 12 :fi :italic
    attrs elems))

(defelem section-body [attrs elems]
  (elem :w (r 1 1)
     attrs elems))

;;; components ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defelem icon [attrs elems]
  (elem :f 24 :fh 24 :ff "Material Icons" :m :pointer :fr :optimizeLegibility
    attrs elems))

(defelem footer-menu [attrs elems]
  (elem :w (r 1 1) attrs
    (let [n (count elems)]
      (for-tpl [elem elems]
         (elem :w (r 1 n))))))

(defelem card [{:keys [title url] :as attrs} elems]
  (elem :bc grey-300 (dissoc attrs :title :url) :d (d 0 1 (c 0 0 0 0.37) 4)
    (image :url url)
    (elem :w (r 1 1) :p pad-md :g pad-sm
      (elem :w (r 1 1) :f 16 :fh 15 :fc font-black :ft :500
        title)
      (elem :w (r 1 1) :f 14 :fh 15 :fc font-black
        elems))))

(defelem feature-box [{:keys [title] :as attrs} elems]
  (elem :w (b :w (r 1 3) sm 100) (dissoc attrs :title)
    (elem :w (r 1 1) :ph 3 :av :middle
      title)
    (elem :w (r 1 1) :h (- (r 1 1) 26) :f 30
     elems)))

;;; view  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn home-view []
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 42
    (view-title title)))

(defelem event-view [attrs _]
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 42
    (view-title    (cell= (:title event)))
    (view-subtitle (cell= (apply str (interpose " " (:speakers event)))))
    (view-body     (cell= (:description event)))))

(defelem events-view [_ _]
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 42
    (view-title :w (r 1 1) title)
    (for-tpl [[idx {:keys [title speakers description start-time stop-time]}] (cell= (map-indexed vector events))]
      (elem :gh 64
        (elem :w 76 :pv 4 :gv 16 :bl 2 :bc (c 0 0 0 0.25) :ah :right
          (elem (cell= (->time start-time)))
          (elem (cell= (->time stop-time))))
        (elem :w (- (r 1 1) 150) :m :pointer :click #(swap! db change-state [:event] {:id @idx})
          (section-title
             title)
          (section-subtitle
             (cell= (apply str (interpose " " speakers))))
          (section-body
             (cell= (when description (subs description 0 100)))))))))

(defelem project-view [attrs _]
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 24
    (view-title    (cell= (:title    project)))
    (view-subtitle (cell= (:focus    project)))
    (view-subtitle (cell= (:status   project)))
    (view-body     (cell= (:summary  project)))
    (view-body     (cell= (:goals    project)))
    (view-body     (cell= (:outcomes project)))
    (view-body     (cell= (apply str (interpose "\n" (:partners  project)))))
    (view-body     (cell= (apply str (interpose "\n" (:resources project)))))))

(defn projects-view []
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 24
    (view-title title)
    (for-tpl [[idx {:keys [title focus status]}] (cell= (map-indexed vector projects))]
      (elem :w (r 1 1) :m :pointer :click #(swap! db change-state [:project] {:id @idx})
        (section-title    title)
        (section-subtitle :pl 4 (cell= (str focus " - " status)))))))

(defn organizers-view []
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 42
    (view-title title)))

(defn videos-view []
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 42
    (view-title title)
    #_(for-tpl [[idx {:keys [video]}] (cell= (map-indexed vector videos))]
        (video :w (b :w (r 1 1) sm (r 1 2) md (r 1 3) lg (r 1 4)) :d (d 0 1 (c 0 0 0 0.37) 4) :m :pointer :url (cell= (str resource-url video))))))

(defelem photo-view [attrs _]
  (elem :w (r 1 1) :h (r 1 1) :p 40 :ah :center :av :middle
    (view-title       (cell= (:title photo)))
    #_(view-subtitle    (cell= (:description photo)))
    (image :w (r 1 1) :d (d 0 1 (c 0 0 0 0.37) 4) :url (cell= (str resource-url (:image photo))) :click #(swap! db change-state [:photos]))))

(defn photos-view []
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 42
    (view-title title)
    (for-tpl [[idx {:keys [thumb]}] (cell= (map-indexed vector photos))]
      (image :w (b :w (r 1 1) sm (r 1 2) md (r 1 3) lg (r 1 4)) :d (d 0 1 (c 0 0 0 0.37) 4) :m :pointer :click #(swap! db change-state [:photo] {:id @idx}) :url (cell= (str resource-url thumb))))))

(defn notes-view []
  (elem :w (r 1 1) :h (- (r 1 1) 64) :p 42 :g 42
    (view-title title)))

(window
  :title        (cell= (str organization " - " name))
  :route        route
  :styles       [icon-url font-url]
  :initiated    (partial swap! db initiate)
  :routechanged (partial swap! db change-route)
  :ff helvetica :fr :optimizeLegibility :fm :antialiased
  (when-tpl (b :w menu-open lg true)
    (elem :w 240 :h (r 1 1) :pv 40 :gv 30 :xl (b :w menu-open lg false) :ah :center :c black :click #(reset! menu-open false) :o 0.3
      (image :h 130 :m :pointer :url "mit-ml-logo.jpg" :click #(do (reset! menu-open false) (swap! db change-state [:projects])))
      (elem :w (r 1 1) :h (- (r 1 1) (+ 130 84)) :gv 46 :bc grey-300
        (for-tpl [[key {:keys [title]}] views]
          (elem :w (r 1 1) :ph 40 :pv 4 :av :middle :bl 3 :bcl (cell= (if (= key state) white black)) :f 18 :ff helvetica :ft :800 :fc white :m :pointer :click #(do (reset! menu-open false) (swap! db change-state [@key]))
            (elem :pt 2 :fx :lowercase
              title))))
      (elem :w (r 1 1) :ph 36 :ff helvetica :fc white
        (image :w 130 :h 54 :url "creative-commons-logo.png" :m :pointer :click #(.open js/window "https://creativecommons.org/")))))
  (elem :w (b :w (r 1 1) lg (- (r 1 1) 240)) :h (r 1 1) :sv :auto
    (elem :w (r 1 1) :h 64 :ph pad-lg :pv pad-sm :g pad-sm :av :middle :bb 0.5 :bc (c 0 0 0 0.15)
      (icon :click #(swap! menu-open not) :fc black "menu")
      (elem :w (- (r 1 1) 24 pad-sm) :g pad-sm :ah :right :av :middle
        (image :w 130 :url "kauffman-logo.png" :m :pointer :click #(.open js/window "http://www.kauffman.org/"))))
    (case-tpl state
      :conference (home-view)
      :event      (event-view)
      :events     (events-view)
      :project    (project-view)
      :projects   (projects-view)
      :organizers (organizers-view)
      :photo      (photo-view)
      :photos     (photos-view)
      :videos     (videos-view)
      :notes      (notes-view)))
  (elem :xl 240 :xr 0 :w (r 1 1) :h (r 1 1) :c (c 0 0 0 0.5) :v (b :w menu-open lg false) :click #(reset! menu-open false)))
